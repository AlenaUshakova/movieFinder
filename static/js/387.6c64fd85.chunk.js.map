{"version":3,"file":"static/js/387.6c64fd85.chunk.js","mappings":"iOAEaA,EAAcC,EAAAA,GAAAA,GAAH,4EAOXC,EAAcD,EAAAA,GAAAA,GAAH,gKASXE,EAAgBF,EAAAA,GAAAA,KAAH,kE,mBCgC1B,EA1CgB,WACd,IAAQG,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAUC,EAAAA,EAAAA,YAAWC,EAAAA,GAArBF,MAWR,IATAG,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAaT,EAAIK,GAAOK,MAAK,SAAAC,GACV,IAAbA,EAAEC,SACJH,EAAAA,EAAAA,IAAaT,EAAI,MAAMU,KAAKN,GAE9BA,EAAWO,EACZ,GACF,GAAE,CAACX,EAAIK,IAEQ,OAAZF,EAIJ,OACE,yBACsB,IAAnBA,EAAQS,QACP,SAAChB,EAAD,UACGO,EAAQU,KAAI,SAAAC,GAAE,OACb,UAAChB,EAAD,YACE,qCACU,SAACC,EAAD,UAAgBe,EAAGC,aAE7B,uBAAID,EAAGE,YAJSF,EAAGd,GADR,OAUjB,cAAGiB,MAAO,CAAEC,UAAW,UAAvB,SACa,OAAVb,EACG,0KACA,8CAKb,C,mPC9CDc,EAAAA,EAAAA,SAAAA,QAAA,gCACA,IAAMC,EAAM,mCAECC,EAAY,mCAAG,WAAMC,GAAN,uFACHH,EAAAA,EAAAA,IAAA,oCACQC,EADR,qBACwBE,IAFrB,cACpBC,EADoB,yBAKnBA,EAASC,KAAKC,QALK,2CAAH,sDAQZC,EAAa,mCAAG,WAAOC,EAAKL,GAAZ,uFACJH,EAAAA,EAAAA,IAAA,sCACUC,EADV,iBACsBO,EADtB,qBACuCL,IAFnC,cACrBC,EADqB,yBAKpBA,EAASC,MALW,2CAAH,wDAQbI,EAAY,mCAAG,WAAOC,EAAOF,EAAKL,GAAnB,uFACHH,EAAAA,EAAAA,IAAA,+BACGC,EADH,kBACgBS,EADhB,qBACkCP,EADlC,YACwCK,EADxC,yBADG,cACpBJ,EADoB,yBAKnBA,EAASC,MALU,2CAAH,0DAQZM,EAAS,mCAAG,WAAO9B,EAAGsB,GAAV,uFACAH,EAAAA,EAAAA,IAAA,gBAAmBnB,EAAnB,oBAAiCoB,EAAjC,qBAAiDE,IADjD,cACjBC,EADiB,yBAGhBA,EAASC,MAHO,2CAAH,wDAMTO,EAAS,mCAAG,WAAO/B,EAAIsB,GAAX,uFACAH,EAAAA,EAAAA,IAAA,gBACZnB,EADY,4BACUoB,EADV,qBAC0BE,IAF1B,cACjBC,EADiB,yBAIhBA,EAASC,KAAKQ,MAJE,2CAAH,wDAOTvB,EAAY,mCAAG,WAAOT,EAAIsB,GAAX,uFACHH,EAAAA,EAAAA,IAAA,gBACZnB,EADY,4BACUoB,EADV,qBAC0BE,EAD1B,YADG,cACpBC,EADoB,yBAInBA,EAASC,KAAKS,SAJK,2CAAH,wDAOZC,EAAa,mCAAG,WAAOlC,GAAP,uFACJmB,EAAAA,EAAAA,IAAA,gBAAmBnB,EAAnB,2BAAwCoB,IADpC,cACrBG,EADqB,yBAEpBA,EAASC,KAAKS,SAFM,2CAAH,qD","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","components/services/api-movie.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewsList = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n\n`;\n\nexport const ReviewsItem = styled.li`\n  border-bottom: 1px dotted orangered;\n  font-size: small;\n  \n  @media screen and (min-width: 768px) {\n    font-size: medium;\n  }\n`;\n\nexport const ReviewsAuthor = styled.span`\n  color: orangered;\n  font-weight: 700;\n`;\n","import { movieReviews } from 'components/services/api-movie';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ReviewsList, ReviewsAuthor, ReviewsItem } from './Reviews.styled';\nimport { useContext } from 'react';\nimport { languageContext } from 'context/LanguageContext';\n\nconst Reviews = () => {\n  const { id } = useParams();\n  const [reviews, setReviews] = useState(null);\n  const { value } = useContext(languageContext);\n\n  useEffect(() => {\n    movieReviews(id, value).then(r => {\n      if (r.length === 0) {\n        movieReviews(id, 'en').then(setReviews);\n      }\n      setReviews(r);\n    });\n  }, [id, value]);\n\n  if (reviews === null) {\n    return;\n  }\n\n  return (\n    <div>\n      {reviews.length !== 0 ? (\n        <ReviewsList>\n          {reviews.map(el => (\n            <ReviewsItem key={el.id}>\n              <p>\n                Author: <ReviewsAuthor>{el.author}</ReviewsAuthor>\n              </p>\n              <p>{el.content}</p>\n            </ReviewsItem>\n          ))}\n        </ReviewsList>\n      ) : (\n        <p style={{ textAlign: 'center' }}>\n          {value === 'ru'\n            ? 'Для этого фильма еще нет отзывов'\n            : 'We don\"t have any reviews for this movie'}\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3/`;\nconst KEY = 'd9a5502e7ecfc2f8fab8d65f4cbb6057';\n\nexport const genresMovies = async(ln) => {\n  const response = await axios.get(\n    `/genre/movie/list?api_key=${KEY}&language=${ln}`\n  );\n\n  return response.data.genres;\n};\n\nexport const popularMovies = async (page,ln) => {\n  const response = await axios.get(\n    `trending/movie/week?api_key=${KEY}&page=${page}&language=${ln}`\n  );\n\n  return response.data;\n};\n\nexport const movieByQuery = async (query, page,ln) => {\n  const response = await axios.get(\n    `search/movie?api_key=${KEY}&query=${query}&language=${ln}&${page}&include_adult=false`\n  );\n\n  return response.data;\n};\n\nexport const movieById = async (id,ln) => {\n  const response = await axios.get(`movie/${id}?api_key=${KEY}&language=${ln}`);\n\n  return response.data;\n};\n\nexport const movieCast = async (id, ln) => {\n  const response = await axios.get(\n    `movie/${id}/credits?api_key=${KEY}&language=${ln}`\n  );\n  return response.data.cast;\n};\n\nexport const movieReviews = async (id, ln) => {\n  const response = await axios.get(\n    `movie/${id}/reviews?api_key=${KEY}&language=${ln}&page=1`\n  );\n  return response.data.results;\n};\n\nexport const getMovieVideo = async (id) => {\n  const response = await axios.get(`movie/${id}/videos?api_key=${KEY}`);\n  return response.data.results;\n};\n\n"],"names":["ReviewsList","styled","ReviewsItem","ReviewsAuthor","id","useParams","useState","reviews","setReviews","value","useContext","languageContext","useEffect","movieReviews","then","r","length","map","el","author","content","style","textAlign","axios","KEY","genresMovies","ln","response","data","genres","popularMovies","page","movieByQuery","query","movieById","movieCast","cast","results","getMovieVideo"],"sourceRoot":""}