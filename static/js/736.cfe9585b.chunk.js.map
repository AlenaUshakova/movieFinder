{"version":3,"file":"static/js/736.cfe9585b.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/services/api-movie.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastConteiner = styled.div`\n  padding: 20px 0;\n`;\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  list-style: none;\n  margin: 0 auto;\n  padding: 0;\n  justify-content: center;\n  text-align: center;\n  width:100%;\n`;\n\nexport const CastItem = styled.li`\n  flex-basis: calc((100% - 30px) / 3);\n  border: 1px dotted orangered;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  font-size: 9px;\n  height: auto;\n  font-weight: 700;\n\n  p {\n    margin: 3px 0 0 0;\n  }\n\n  @media screen and (min-width: 480px) {\n    flex-basis: calc((100% - 40px) / 5);\n  }\n  @media screen and (min-width: 768px) {\n    flex-basis: calc((100% - 70px) / 8);\n  }\n\n  @media screen and (min-width: 1200px) {\n    flex-basis: calc((100% - 120px) / 13);\n  }\n`;\n\nexport const CastImg = styled.img`\n  display: block;\n  max-width: 100%;\n  height: 120px;\n\n`;\n\nexport const FilmHero = styled.span`\n  color: orangered;\n`;\n","import { movieCast } from 'components/services/api-movie';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  CastList,\n  CastConteiner,\n  CastItem,\n  CastImg,\n  FilmHero,\n} from './Cast.styled';\nimport { nanoid } from 'nanoid';\n\nconst BASE_URL = 'https://image.tmdb.org/t/p/w500';\nconst defoltImg =\n  'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQJnNH6I8IvZndxspJlJ0BDEyUNHxLvNokyWQ&usqp=CAU';\n\nconst Cast = ({ value }) => {\n  const { id } = useParams();\n  const [castList, setCastList] = useState();\n\n  useEffect(() => {\n    movieCast(id, value).then(setCastList);\n  }, [id, value]);\n\n  if (!castList) {\n    return null;\n  }\n\n  return (\n    <CastConteiner>\n      {castList.length === 0 ? (\n        <p style={{ margin: '0', textAlign: 'center' }}>\n          {value === 'ru'\n            ? 'Для этого фильма нет информации по актерскому составу'\n            : 'We don\"t have any cast for this movie'}\n        </p>\n      ) : (\n        <CastList>\n          {castList.map(el => (\n            <CastItem key={nanoid()}>\n              <CastImg\n                src={\n                  el.profile_path ? `${BASE_URL}${el.profile_path}` : defoltImg\n                }\n                alt=\"\"\n                width=\"80\"\n              />\n              <div style={{ padding: '5px' }}>\n                <p>{el.name}</p>\n                <p>\n                  {value === 'ru' ? 'Персонаж: ' : 'Character: '}{' '}\n                  <FilmHero>{el.character}</FilmHero>\n                </p>\n              </div>\n            </CastItem>\n          ))}\n        </CastList>\n      )}\n    </CastConteiner>\n  );\n};\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3/`;\nconst KEY = 'd9a5502e7ecfc2f8fab8d65f4cbb6057';\n\nexport const genresMovies = async(ln) => {\n  const response = await axios.get(\n    `/genre/movie/list?api_key=${KEY}&language=${ln}`\n  );\n\n  return response.data.genres;\n};\n\nexport const popularMovies = async (page,ln) => {\n  const response = await axios.get(\n    `trending/movie/week?api_key=${KEY}&page=${page}&language=${ln}`\n  );\n\n  return response.data;\n};\n\nexport const movieByQuery = async (query, page,ln) => {\n  const response = await axios.get(\n    `search/movie?api_key=${KEY}&query=${query}&language=${ln}&${page}&include_adult=false`\n  );\n\n  return response.data;\n};\n\nexport const movieById = async (id,ln) => {\n  const response = await axios.get(`movie/${id}?api_key=${KEY}&language=${ln}`);\n\n  return response.data;\n};\n\nexport const movieCast = async (id, ln) => {\n  const response = await axios.get(\n    `movie/${id}/credits?api_key=${KEY}&language=${ln}`\n  );\n  return response.data.cast;\n};\n\nexport const movieReviews = async (id, ln) => {\n  const response = await axios.get(\n    `movie/${id}/reviews?api_key=${KEY}&language=${ln}&page=1`\n  );\n  return response.data.results;\n};\n\nexport const getMovieVideo = async (id) => {\n  const response = await axios.get(`movie/${id}/videos?api_key=${KEY}`);\n  return response.data.results;\n};\n\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["CastConteiner","styled","CastList","CastItem","CastImg","FilmHero","value","id","useParams","useState","castList","setCastList","useEffect","movieCast","then","length","style","margin","textAlign","map","el","src","profile_path","alt","width","padding","name","character","nanoid","axios","KEY","genresMovies","ln","response","data","genres","popularMovies","page","movieByQuery","query","movieById","cast","movieReviews","results","getMovieVideo","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}